{-# OPTIONS --copatterns #-}
open import Function
open import Data.Product hiding (zip)
                         renaming (_,_ to ‚ü®_,_‚ü©; proj‚ÇÅ to fst; proj‚ÇÇ to snd;
                                   map to √ómap)
open import Data.Zero
open import Data.One
open import Data.Two
open import Data.Sum
open import Data.Nat
{-
open import Data.Vec
open import Data.Fin
-}
-- open import Data.List

open import Relation.Nullary
open import Relation.Binary.PropositionalEquality.NP hiding ([_]; J)
open import partensor.Shallow.Dom
import partensor.Shallow.Session as Session
import partensor.Shallow.Map as Map
import partensor.Shallow.Env as Env
import partensor.Shallow.Proto as Proto
open Session hiding (Ended)
open Env     hiding (_/‚ÇÄ_; _/‚ÇÅ_; _/[_]_; Ended)
open Proto   hiding ()
open import partensor.Shallow.Equiv' hiding (‚ô¶-assoc ; ‚ô¶-com ; ‚ô¶-com, ; /Ds-com)
open import partensor.Shallow.Term
open import partensor.Shallow.Vars

module partensor.Shallow.Cut where

record TC-Split (A : Session) {Œ¥K}(K : Proto Œ¥K) : Set‚ÇÅ where
  field
    NES : ¬¨ (Session.Ended A)
    cont-‚Öã : ‚àÄ {S T} ‚Üí A ‚â° S ‚Öã T ‚Üí ‚àÄ {d e Œ¥J}{J : Proto Œ¥J}(l : [ d ‚Ü¶ S ‚Ä¶]‚àà' J)(l' : [ e ‚Ü¶ T ‚Ä¶]‚àà' J)
      ‚Üí DifferentVars‚Ä¶ l l' ‚Üí TC'‚ü® J ‚ü©
      ‚Üí TC'‚ü® (J /D[ [‚Ü¶‚Ä¶]‚àà'.lŒî l >> [‚Ü¶‚Ä¶]‚àà'.lA l ] /D[ [‚Ü¶‚Ä¶]‚àà'.lŒî l' >> [‚Ü¶‚Ä¶]‚àà'.lA l' ]) ‚ô¶Proto' K ‚ü©
    cont-‚äó : ‚àÄ {S T} ‚Üí A ‚â° S ‚äó T ‚Üí ‚àÄ {d e Œ¥‚ÇÄ Œ¥‚ÇÅ}{J‚ÇÄ : Proto Œ¥‚ÇÄ}{J‚ÇÅ : Proto Œ¥‚ÇÅ}(l : [ d ‚Ü¶ S ‚Ä¶]‚àà' J‚ÇÄ)(l' : [ e ‚Ü¶ T ‚Ä¶]‚àà' J‚ÇÅ)
      ‚Üí TC'‚ü® J‚ÇÄ ‚ü© ‚Üí TC'‚ü® J‚ÇÅ ‚ü© ‚Üí TC'‚ü® (J‚ÇÄ /‚Ä¶' l ‚ô¶Proto' J‚ÇÅ /‚Ä¶' l') ‚ô¶Proto' K ‚ü©
open TC-Split


TC-‚ààSplit : ‚àÄ {Œ¥I Œ¥K c A}{I : Proto Œ¥I}{K : Proto Œ¥K} ‚Üí TC-Split A K ‚Üí (l : [ c ‚Ü¶ A ‚Ä¶]‚àà' I)
  ‚Üí TC'‚ü® I ‚ü© ‚Üí TC'‚ü® I /‚Ä¶' l ‚ô¶Proto' K ‚ü©
TC-‚ààSplit cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) with sameVar? l l‚ÇÅ
TC-‚ààSplit {I = I} cont l (TC-‚äó-out .l œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) | same = TC-conv
  (‚ô¶-cong‚ÇÇ (‚âà-trans (‚ô¶-cong‚ÇÇ
                      (‚âà-sym (‚âà-trans (/[]-/D[>>] 0‚ÇÇ I œÉs ([‚Ü¶‚Ä¶]‚àà'.lŒî l)([‚Ü¶‚Ä¶]‚àà'.lA l))
                             {!thmA!}))
                      {!!})
{-(‚ô¶-cong‚ÇÇ (‚âà-trans (‚âà-sym {!thmA {!!}!}) {!!})
                             {!!})-}
                    (Sel‚ô¶ œÉs))
   ‚âà-refl)
  {-(
  (‚ô¶-cong‚ÇÇ (‚âà-trans (‚ô¶-cong‚ÇÇ (‚âà,[end] ‚ü® mapAll (Œª _ ‚Üí _) _ , _ ‚ü©)
                             (‚âà,[end] ‚ü® (mapAll (Œª _ ‚Üí _) _) , _ ‚ü©))
             (‚âà-trans (Sel‚ô¶ œÉs) ([‚âî]-ext _ ([‚Ü¶‚Ä¶]‚àà'.lI l) ({!!} ‚àº-End {!!}))))
           ‚âà-refl) ) -}
  (cont-‚äó cont refl (mk (mk Doms'.here refl) (mk here refl))
                    (mk (mk Doms'.here refl) (mk here refl))
                    (P‚ÇÄ c‚ÇÄ) (P‚ÇÅ c‚ÇÅ))
  where postulate c‚ÇÄ c‚ÇÅ : _
TC-‚ààSplit cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) | diff x = {!!}
TC-‚ààSplit cont l (TC-‚Öã-inp l‚ÇÅ P) with sameVar? l ([‚Ü¶]‚àà'.l‚Ä¶ l‚ÇÅ)
TC-‚ààSplit cont l (TC-‚Öã-inp (mk .l E/c‚ÇÅ) P) | same = TC-conv
  ((‚ô¶-cong‚ÇÇ (‚âà-trans (‚âà,[end] _) (‚âà-trans (‚âà,[end] _) ([‚âî]-ext _ ([‚Ü¶‚Ä¶]‚àà'.lI l) (/*-End _ ‚àº-End E/c‚ÇÅ)))) ‚âà-refl))
  (cont-‚Öã cont refl (mk (mk (Doms'.there Doms'.here) refl) (mk here refl))
                    (mk (mk Doms'.here refl) (mk here refl))
                    (diff-ten (t/h _)) (P c‚ÇÄ c‚ÇÅ))
  -- postulate for channels.. grr
  where postulate c‚ÇÄ c‚ÇÅ : _
TC-‚ààSplit {I = I}{K} cont l (TC-‚Öã-inp (mk l‚ÇÅ X) P) | diff x = TC-‚Öã-inp (mk (‚àà‚ô¶‚ÇÄ‚Ä¶ {I‚ÇÅ = K} (move‚Ä¶ l l‚ÇÅ x)) X) Œª c‚ÇÄ c‚ÇÅ ‚Üí
  TC-conv
         (‚âà-trans ‚ô¶-com,
         (‚âà,[] (‚âà-trans ‚ô¶-com,
         (‚âà,[] (‚âà-sym (‚âà-trans (‚àà‚ô¶‚ÇÄ-compute[‚Ä¶] (move‚Ä¶ l l‚ÇÅ x))
         (‚ô¶-cong‚ÇÇ ([/]-/D[>>] I ([‚Ü¶‚Ä¶]‚àà'.lŒî l) ([‚Ü¶‚Ä¶]‚àà'.lŒî l‚ÇÅ) ([‚Ü¶‚Ä¶]‚àà'.lA l))
         ‚âà-refl)))
         ‚àº-refl))
         ‚àº-refl))
  (TC-‚ààSplit cont (there‚Ä¶' (there‚Ä¶' (move[‚Ä¶] l‚ÇÅ l (Diff-sym‚Ä¶ x)))) (P c‚ÇÄ c‚ÇÅ))
TC-‚ààSplit cont l (TC-end E) = ùüò-elim (NES cont (Map.All‚àà' (Proto.All‚àà' E ([‚Ü¶‚Ä¶]‚àà'.lI l)) ([‚Ü¶‚Ä¶]‚àà'.lE l)))
TC-‚ààSplit cont l (TC-mix lF lG lF/=lG P) with sameDoms? ([‚Ü¶‚Ä¶]‚àà'.lŒî l) ([]‚àà'.lŒî lF) | sameDoms? ([‚Ü¶‚Ä¶]‚àà'.lŒî l) ([]‚àà'.lŒî lG)
TC-‚ààSplit {Œ¥K = Œ¥K}{I = I}{K = K}cont (mk (mk lŒî refl) (mk lA refl)) (TC-mix {Œ¥G = Œ¥G}{G = G} (mk .lŒî refl) lG lF/=lG P) | inj‚ÇÇ ‚ü® refl , refl ‚ü© | Y
  = TC-mix (mk ([]‚àà‚ô¶‚ÇÄ {Œ¥F = Œ¥K}lŒî) (lookup-[]‚àà‚ô¶'‚ÇÄ _ K lŒî))
           (mk ([]‚àà‚ô¶‚ÇÄ {Œ¥F = Œ¥K} ([]‚àà'.lŒî lG)) (lookup-[]‚àà‚ô¶'‚ÇÄ _ K ([]‚àà'.lŒî lG) ‚àô lookup-diff _ _ _ _ lF/=lG ‚àô []‚àà'.‚Ü¶Œî lG))
    ([]‚àà‚ô¶‚ÇÄ-diff {Œ¥F = Œ¥K} lF/=lG)
   (TC-conv (‚âà-trans ‚ô¶-com, (‚âà,[] (‚âà-reflexive lemma‚ÇÄ)
               (‚àº-reflexive ([‚àà‚ô¶‚ÇÄ]‚âî' (Proto.lookup I lŒî) G lA end ‚àô ap (flip _‚ô¶Map_ G) (! lookup/D[>>] I lŒî lA )))))
   (TC-‚ààSplit cont (mk (mk Doms'.here refl) (mk (‚àà‚ô¶‚ÇÄ {F = Œ¥G} lA) (lookup-‚àà‚ô¶‚ÇÄ _ G lA))) P))
   where
     lemma‚ÇÄ : (I /Ds lŒî) /Ds  ([]‚àà'.lŒî lG) ‚ô¶Proto' K
         ‚â° (I /D[ lŒî >> lA ] ‚ô¶Proto' K) /Ds []‚àà‚ô¶‚ÇÄ {Œ¥F = Œ¥K} lŒî /Ds ([]‚àà‚ô¶‚ÇÄ {Œ¥F = Œ¥K} ([_]‚àà'_.lŒî lG))
     lemma‚ÇÄ rewrite ! /Ds>>-red I lŒî lA
                  | /Ds-[]‚àà‚ô¶'‚ÇÄ {I = I /D[ lŒî >> lA ] /Ds lŒî} ([]‚àà'.lŒî lG) K
                  | /Ds-[]‚àà‚ô¶'‚ÇÄ {I = I /D[ lŒî >> lA ]} lŒî K = refl

TC-‚ààSplit cont l (TC-mix lF lG lF/=lG P) | inj‚ÇÅ x | inj‚ÇÇ y = {!!}
TC-‚ààSplit cont l (TC-mix lF lG lF/=lG P) | inj‚ÇÅ x | inj‚ÇÅ x‚ÇÅ = {!!}

{- 
TC-mix {!!} {!!} {!!}
   (TC-conv {!!}
     (TC-‚ààSplit cont {!!} P))
-}
TC-‚ààSplit {I = I} cont (mk (mk lŒî ‚Ü¶Œî) (mk lA ‚Ü¶A)) (TC-split œÉs A1 P P‚ÇÅ)
    with Map.lookup (Proto.lookup œÉs lŒî) lA
    | select {I = I} œÉs lŒî lA
    | select-com {I = I} œÉs lŒî lA
TC-‚ààSplit {Œ¥K = Œ¥K}{I = I}{K} cont (mk (mk lŒî refl) (mk lA refl)) (TC-split œÉs A1 P P‚ÇÅ)
  | 0‚ÇÇ | x | y = TC-split (Selections‚ô¶ 0‚ÇÇ œÉs Œ¥K) (atMost‚ô¶ 0‚ÇÇ œÉs Œ¥K A1)
  (TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ (‚âà-sym (/[]-/D[>>] 0‚ÇÇ I œÉs lŒî lA)) ‚âà-refl)
                    (‚âà-sym (Selections‚ô¶'/same {I = I /D[ lŒî >> lA ]}{K} 0‚ÇÇ œÉs)))
           (TC-‚ààSplit cont ((mk (mk lŒî refl) (mk lA (! x)))) P))
  (TC-conv (‚âà-trans y (‚âà-sym (Selections‚ô¶'/not {I = I /D[ lŒî >> lA ]} {K} 1‚ÇÇ œÉs))) P‚ÇÅ)
TC-‚ààSplit {Œ¥K = Œ¥K}{I = I}{K} cont (mk (mk lŒî refl) (mk lA refl)) (TC-split œÉs A1 P P‚ÇÅ)
  | 1‚ÇÇ | x | y = TC-split (Selections‚ô¶ 1‚ÇÇ œÉs Œ¥K) (atMost‚ô¶ 1‚ÇÇ œÉs Œ¥K A1)
  (TC-conv (‚âà-trans y (‚âà-sym (Selections‚ô¶'/not {I = I /D[ lŒî >> lA ]}{K} 0‚ÇÇ œÉs))) P)
  (TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ (‚âà-sym (/[]-/D[>>] 1‚ÇÇ I œÉs lŒî lA)) ‚âà-refl)
                    (‚âà-sym (Selections‚ô¶'/same {I = I /D[ lŒî >> lA ]}{K} 1‚ÇÇ œÉs)))
           (TC-‚ààSplit cont ((mk (mk lŒî refl) (mk lA (! x)))) P‚ÇÅ))


TC-‚àà‚Öã : ‚àÄ {Œ¥I Œ¥K c A B}{I : Proto Œ¥I}{K : Proto Œ¥K}(l : [ c ‚Ü¶ A ‚Öã B ‚Ä¶]‚àà' I)
  ‚Üí TC'‚ü® I ‚ü©
  ‚Üí (‚àÄ {d e Œ¥J}{J : Proto Œ¥J} (l : [ d ‚Ü¶ A ‚Ä¶]‚àà' J)(l' : [ e ‚Ü¶  B ‚Ä¶]‚àà' J) ‚Üí DifferentVars‚Ä¶ l l' ‚Üí TC'‚ü® J ‚ü©
     ‚Üí TC'‚ü® ((J /‚Ä¶' l) /D[ [‚Ü¶‚Ä¶]‚àà'.lŒî l' >> [‚Ü¶‚Ä¶]‚àà'.lA l' ]) ‚ô¶Proto' K ‚ü©)
  ‚Üí  TC'‚ü® I /‚Ä¶' l ‚ô¶Proto' K ‚ü©
TC-‚àà‚Öã = {!!}

TC-‚àà‚äó : ‚àÄ {Œ¥I Œ¥K c A B}{I : Proto Œ¥I}{K : Proto Œ¥K}(l : [ c ‚Ü¶ A ‚äó B ‚Ä¶]‚àà' I)
  ‚Üí TC'‚ü® I ‚ü©
  ‚Üí (‚àÄ {d e Œ¥J‚ÇÄ Œ¥J‚ÇÅ}{J‚ÇÄ : Proto Œ¥J‚ÇÄ}{J‚ÇÅ : Proto Œ¥J‚ÇÅ}
       (l‚ÇÄ : [ d ‚Ü¶ A ‚Ä¶]‚àà' J‚ÇÄ)(l‚ÇÅ : [ e ‚Ü¶ B ‚Ä¶]‚àà' J‚ÇÅ) ‚Üí TC'‚ü® J‚ÇÄ ‚ü© ‚Üí TC'‚ü® J‚ÇÅ ‚ü©
        ‚Üí TC'‚ü® (J‚ÇÄ /‚Ä¶' l‚ÇÄ ‚ô¶Proto' J‚ÇÅ /‚Ä¶' l‚ÇÅ) ‚ô¶Proto' K ‚ü©)
  ‚Üí TC'‚ü® I /‚Ä¶' l ‚ô¶Proto' K ‚ü©
TC-‚àà‚äó {A = A}{B}{K = K} l cont = {!!} -- TC-‚ààSplit cont' (mk l ?)
{-
  where
     cont' : TC-Split (A ‚äó B) K
     NES cont' x = x
     cont-‚Öã cont' () l‚ÇÅ l' x‚ÇÅ x‚ÇÇ
     cont-‚äó cont' refl = cont -- l‚ÇÅ l' x‚ÇÅ x‚ÇÇ = {!!}
     -}

TC-cut :
    ‚àÄ {c‚ÇÄ c‚ÇÅ S‚ÇÄ S‚ÇÅ Œ¥‚ÇÄ Œ¥‚ÇÅ}{I‚ÇÄ : Proto Œ¥‚ÇÄ}{I‚ÇÅ : Proto Œ¥‚ÇÅ}
      (D : Dual S‚ÇÄ S‚ÇÅ)
      (l‚ÇÄ : [ c‚ÇÄ ‚Ü¶ S‚ÇÄ ‚Ä¶]‚àà' I‚ÇÄ)(l‚ÇÅ : [ c‚ÇÅ ‚Ü¶ S‚ÇÅ ‚Ä¶]‚àà' I‚ÇÅ)
      (P‚ÇÄ : TC'‚ü® I‚ÇÄ ‚ü©) (P‚ÇÅ : TC'‚ü® I‚ÇÅ ‚ü©)
    ‚Üí TC'‚ü® (I‚ÇÄ /‚Ä¶' l‚ÇÄ) ‚ô¶Proto' (I‚ÇÅ /‚Ä¶' l‚ÇÅ) ‚ü©
TC-cut end l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = {!!}
TC-cut (‚äó‚Öã D D‚ÇÅ D‚ÇÇ D‚ÇÉ) l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = {!!}
TC-cut (‚Öã‚äó D D‚ÇÅ D‚ÇÇ D‚ÇÉ) l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = TC-‚àà‚Öã l‚ÇÄ P‚ÇÄ Œª d e d/=e ab ‚Üí
  TC-conv ‚ô¶-com
  (TC-‚àà‚äó l‚ÇÅ P‚ÇÅ Œª d' e' a b ‚Üí
    TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ ‚âà-refl (‚àà‚ô¶‚ÇÅ-compute‚Ä¶ (move‚Ä¶ d e d/=e)))
            (‚âà-trans ‚ô¶-assoc
            (‚ô¶-cong‚ÇÇ ‚ô¶-com ‚âà-refl)))
     (TC-cut D‚ÇÉ e' (‚àà‚ô¶‚ÇÅ‚Ä¶ (move‚Ä¶ d e d/=e)) b (TC-cut D‚ÇÅ d' d a ab))
  )
{-
TC-cut end l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = {!TC-split œÉs A0 P‚ÇÄ P‚ÇÅ!}
TC-cut (‚äó‚Öã D D‚ÇÅ D‚ÇÇ D‚ÇÉ) l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = ?
{-TC-conv ‚ô¶-com
  (TC-‚àà‚Öã l‚ÇÅ (Œª d e d/=e a'b' ‚Üí TC-conv (‚âà-trans ‚ô¶-com (‚ô¶-cong‚ÇÇ (‚âà-trans {!move-compute {!e!} {!d!} {!(Diff-sym d/=e)!}!} {!Proto.forget!}) ‚âà-refl))
   (TC-‚àà‚äó l‚ÇÄ (Œª d' e' a b ‚Üí TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ ‚âà-refl
               (‚àà‚ô¶‚ÇÅ-compute (move {!e!} {!d!} {!(Diff-sym d/=e)!}))) ‚ô¶-assoc)
     (TC-cut  D d' (‚àà‚ô¶‚ÇÅ (move {!e!} {!d!} {!(Diff-sym d/=e)!})) a (TC-cut D‚ÇÇ e' e b a'b')))
   P‚ÇÄ))
  P‚ÇÅ)
  -}
TC-cut (‚Öã‚äó D D‚ÇÅ D‚ÇÇ D‚ÇÉ) l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = TC-conv ‚âà-refl
  (TC-‚àà‚Öã l‚ÇÄ (Œª {_}{_}{_}{J} d e d/=e ab ‚Üí TC-conv ‚ô¶-com
  (TC-‚àà‚äó l‚ÇÅ (Œª {_}{_}{_}{_}{J‚ÇÄ}{J‚ÇÅ} d' e' a b ‚Üí let X = TC-cut D‚ÇÅ d' d a ab
       in TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ ‚âà-refl (‚àà‚ô¶‚ÇÅ-compute (move d e d/=e)))
               (‚âà-trans ‚ô¶-assoc (‚ô¶-cong‚ÇÇ ‚ô¶-com (move-compute‚Ä¶ ([‚Ü¶]‚àà'.l‚Ä¶ d) ([‚Ü¶]‚àà'.l‚Ä¶ e) (Diff‚Ä¶ d/=e)))))
          (TC-cut D‚ÇÉ e' (‚àà‚ô¶‚ÇÅ (move d e d/=e)) b X))
   P‚ÇÅ)) P‚ÇÄ)
-}

{-
TC-‚ààSplit {I = I} cont (mk (mk (mk lŒî ‚Ü¶Œî) (mk lA ‚Ü¶A)) E/c) (TC-split œÉs A1 P P‚ÇÅ) with select {I = I} œÉs lŒî lA
TC-‚ààSplit {Œ¥K = Œ¥K}{I = I}{K} cont (mk (mk (mk lŒî refl) (mk lA refl)) E/c) (TC-split œÉs A1 P P‚ÇÅ)
  | inj‚ÇÅ x = TC-split (Selections‚ô¶ 0‚ÇÇ œÉs Œ¥K) (atMost‚ô¶ 0‚ÇÇ œÉs Œ¥K A1)
  (TC-conv (‚âà-sym (‚âà-trans (Selections‚ô¶/same {I = I /Ds lŒî} {K} 0‚ÇÇ œÉs)
                  (‚ô¶-cong‚ÇÇ (/[]-/Ds 0‚ÇÇ I œÉs lŒî) ‚âà-refl)))
           (TC-‚ààSplit cont (mk (mk (mk lŒî refl) (mk lA (! x))) {!!}) P))
  (TC-conv (‚âà-sym (‚âà-trans (Selections‚ô¶/not {I = I /Ds lŒî} {K} 1‚ÇÇ œÉs) {!!}))
           P‚ÇÅ)
TC-‚ààSplit cont (mk (mk (mk lŒî ‚Ü¶Œî) (mk lA ‚Ü¶A)) E/c) (TC-split œÉs A1 P P‚ÇÅ)
  | inj‚ÇÇ y = {!!}

{-
-- selection style
record TC-Split (A : Session) {Œ¥K}(K : Proto Œ¥K) : Set‚ÇÅ where
  field
    NES : ¬¨ (Session.Ended A)
    cont-‚Öã : ‚àÄ {S T} ‚Üí A ‚â° S ‚Öã T ‚Üí ‚àÄ {d e Œ¥J}{J : Proto Œ¥J}(œÉ : Selections Œ¥J)
      ‚Üí K ‚âà J /‚ÇÅ œÉ ‚Üí
      (l : [ d ‚Ü¶ S ]‚àà J /‚ÇÄ œÉ)(l' : [ e ‚Ü¶ T ]‚àà J /‚ÇÄ œÉ)
      ‚Üí DifferentVars l l' ‚Üí TC‚ü® J /‚ÇÄ œÉ ‚ü© ‚Üí TC‚ü® J /‚ÇÅ œÉ ‚ü©
      ‚Üí TC‚ü® (J /Ds Proto.forget ([‚Ü¶]‚àà.lI l) /Ds Proto.forget ([‚Ü¶]‚àà.lI l')) ‚ü©
open TC-Split

TC-‚ààSplit : ‚àÄ {Œ¥I c A}{I : Proto Œ¥I}(œÉ : Selections Œ¥I) ‚Üí TC-Split A (I /‚ÇÅ œÉ) ‚Üí (l : [ c ‚Ü¶ A ]‚àà I /‚ÇÄ œÉ)
  ‚Üí TC‚ü® I /‚ÇÄ œÉ ‚ü© ‚Üí TC‚ü® I /Ds Proto.forget ([‚Ü¶]‚àà.lI l) ‚ü©
TC-‚ààSplit œÉ cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) = {!!}
TC-‚ààSplit œÉ cont l (TC-‚Öã-inp l‚ÇÅ P) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) ([‚Ü¶]‚àà.l‚Ä¶ l‚ÇÅ)
TC-‚ààSplit œÉ cont (mk l X) (TC-‚Öã-inp (mk .l X‚ÇÅ) P) | same =
  let X = cont-‚Öã cont refl {c‚ÇÄ}{c‚ÇÅ} ((œÉ ,[ Œµ , _ ‚Ü¶ 0‚ÇÇ ]) ,[ Œµ , _ ‚Ü¶ 0‚ÇÇ ])
          (‚âà-sym (‚âà-trans (‚âà,[end] _) (‚âà-trans (‚âà,[end] _) {!!})))
          (there[] (mk (mk here here) {!!})) (mk (mk here here) {!!}) {!!} (TC-conv {!‚âà-refl!} (P c‚ÇÄ c‚ÇÅ)) {!!}
   in TC-conv (‚âà-trans (‚âà,[end] _) (‚âà,[end] _)) X
   where postulate c‚ÇÄ c‚ÇÅ : _
TC-‚ààSplit œÉ cont l (TC-‚Öã-inp l‚ÇÅ P) | diff x = TC-‚Öã-inp {!l‚ÇÅ!} {!!}
TC-‚ààSplit œÉ cont l (TC-end E) = {!!}
TC-‚ààSplit œÉ cont l (TC-split œÉs A1 P P‚ÇÅ) = {!!}
-}

-- OLD ATTEMPT
{-


record TC-Split (A : Session) {Œ¥K}(K : Proto Œ¥K) : Set‚ÇÅ where
  field
    NES : ¬¨ (Session.Ended A)
    cont-‚Öã : ‚àÄ {S T} ‚Üí A ‚â° S ‚Öã T ‚Üí ‚àÄ {d e Œ¥J}{J : Proto Œ¥J}(l : [ d ‚Ü¶ S ]‚àà J)(l' : [ e ‚Ü¶ T ]‚àà J)
      ‚Üí DifferentVars l l' ‚Üí TC‚ü® J ‚ü© ‚Üí TC‚ü® (J / [‚Ü¶]‚àà.lI l /Ds Proto.forget ([‚Ü¶]‚àà.lI l')) ‚ô¶Proto' K ‚ü©
    cont-‚äó : ‚àÄ {S T} ‚Üí A ‚â° S ‚äó T ‚Üí ‚àÄ {d e Œ¥‚ÇÄ Œ¥‚ÇÅ}{J‚ÇÄ : Proto Œ¥‚ÇÄ}{J‚ÇÅ : Proto Œ¥‚ÇÅ}(l : [ d ‚Ü¶ S ]‚àà J‚ÇÄ)(l' : [ e ‚Ü¶ T ]‚àà J‚ÇÅ)
      ‚Üí TC‚ü® J‚ÇÄ ‚ü© ‚Üí TC‚ü® J‚ÇÅ ‚ü© ‚Üí TC‚ü® (J‚ÇÄ / [‚Ü¶]‚àà.lI l ‚ô¶Proto' J‚ÇÅ / ([‚Ü¶]‚àà.lI l')) ‚ô¶Proto' K ‚ü©
open TC-Split

{-
-- need to add that the erasure of the result is the same
postulate
  ‚àà-selections : ‚àÄ {c A Œ¥I}{I : Proto Œ¥I}(œÉ : Selections Œ¥I)(l : [ c ‚Ü¶ A ]‚àà I)
    ‚Üí (c ‚Ü¶ A ‚àà (([‚Ü¶]‚àà.E l) Env./‚ÇÄ œÉ))
    ‚äé ([ c ‚Ü¶ A ]‚àà I /‚ÇÅ œÉ)
-}

data ‚àà-select {c A}{Œ¥I}{I : Proto Œ¥I}:(œÉ : Selections Œ¥I) ‚Üí [ c ‚Ü¶ A ]‚àà I ‚Üí Set where

postulate
  End/‚ÇÄ : ‚àÄ {Œ¥}{E : Env Œ¥}(œÉ : Selection Œ¥) ‚Üí Env.Ended E ‚Üí Env.Ended (E Env./‚ÇÄ œÉ)
  End/‚ÇÅ : ‚àÄ {Œ¥}{E : Env Œ¥}(œÉ : Selection Œ¥) ‚Üí Env.Ended E ‚Üí Env.Ended (E Env./‚ÇÅ œÉ)
  Sel‚ô¶ : ‚àÄ {Œ¥s}{I : Proto Œ¥s}(œÉ : Selections Œ¥s) ‚Üí I /‚ÇÄ œÉ ‚ô¶Proto' I /‚ÇÅ œÉ ‚âà I

--need continuation for ‚äó
TC-‚ààSplit : ‚àÄ {Œ¥I Œ¥K c A}{I : Proto Œ¥I}{K : Proto Œ¥K} ‚Üí TC-Split A K ‚Üí (l : [ c ‚Ü¶ A ]‚àà I)
  ‚Üí TC‚ü® I ‚ü© ‚Üí TC‚ü® I [/] l ‚ô¶Proto' K ‚ü©
TC-‚ààSplit cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) l‚ÇÅ
TC-‚ààSplit cont (mk l X) (TC-‚äó-out .l œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) | same = TC-conv
  (‚ô¶-cong‚ÇÇ (‚âà-trans (‚ô¶-cong‚ÇÇ (‚âà,[end] ‚ü® mapAll _ _ , _ ‚ü©) (‚âà,[end] ‚ü® mapAll _ _ , _ ‚ü©))
  (Sel‚ô¶ œÉs))
  ‚âà-refl)
  (cont-‚äó cont refl (mk (mk here here) E‚ÇÄ) (mk (mk here here) ‚ü® End/‚ÇÅ œÉE X , _ ‚ü©) (P‚ÇÄ c‚ÇÄ) (P‚ÇÅ c‚ÇÅ))
  where postulate c‚ÇÄ c‚ÇÅ : _
        E‚ÇÄ = ‚ü® End/‚ÇÄ œÉE X , _ ‚ü©
TC-‚ààSplit cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) | diff x = {!!}
TC-‚ààSplit cont l (TC-‚Öã-inp l‚ÇÅ P) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) ([‚Ü¶]‚àà.l‚Ä¶ l‚ÇÅ)
TC-‚ààSplit cont (mk l X) (TC-‚Öã-inp (mk .l Y) P) | same = TC-conv
  (‚ô¶-cong‚ÇÇ (‚âà-trans (‚âà,[end] _) (‚âà,[end] _)) ‚âà-refl)
  (cont-‚Öã cont refl (there[] (mk (mk here here) _)) (mk (mk here here) _) {!!} (P c‚ÇÄ c‚ÇÅ))
  -- postulate for channels.. grr
  where postulate c‚ÇÄ c‚ÇÅ : _
TC-‚ààSplit cont l (TC-‚Öã-inp l‚ÇÅ P) | diff x = TC-‚Öã-inp (‚àà‚ô¶‚ÇÄ (move l l‚ÇÅ (mk x))) Œª c‚ÇÄ c‚ÇÅ ‚Üí
  TC-conv (‚âà-trans ‚ô¶-com,
          (‚âà,[] (‚âà-trans ‚ô¶-com, (‚âà,[]
           (‚âà-sym (‚âà-trans (‚àà‚ô¶‚ÇÄ-compute (move l l‚ÇÅ (mk x)))
           (‚ô¶-cong‚ÇÇ (‚âà-trans (move-compute‚Ä¶ _ _ _)
           (‚âà-trans (/Ds-com (Proto.forget ([‚Ü¶]‚àà.lI l)) (Proto.forget ([‚Ü¶]‚àà.lI l‚ÇÅ)))
           (‚âà-sym (move-compute‚Ä¶ _ _ _))))
           ‚âà-refl)))
           ‚àº-refl))
           ‚àº-refl))
  (TC-‚ààSplit cont (there[] (there[] (move l‚ÇÅ l (Diff-sym (mk x))))) (P c‚ÇÄ c‚ÇÅ))
TC-‚ààSplit cont l (TC-end E) = ùüò-elim (NES cont (Map.All‚àà (Proto.All‚àà E ([‚Ü¶]‚àà.lI l)) ([‚Ü¶]‚àà.lE l)))
TC-‚ààSplit cont l (TC-split œÉs A1 P P‚ÇÅ) = {!!}

{-with ‚àà-selections œÉs l
TC-‚ààSplit {Œ¥K = Œ¥K} cont l (TC-split œÉs A1 P P‚ÇÅ) | inj‚ÇÅ x = TC-split (allLeft Œ¥K œÉs) {!!} (TC-conv {!!} (TC-‚ààSplit cont x P)) (TC-conv {!!} P‚ÇÅ)
TC-‚ààSplit cont l (TC-split œÉs A1 P P‚ÇÅ) | inj‚ÇÇ y = {!!}

-}
-}
{-
TC-‚ààSplit cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) l‚ÇÅ
TC-‚ààSplit cont (mk l X) (TC-‚äó-out .l œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) | same = TC-conv
  (‚ô¶-cong‚ÇÇ (‚âà-trans (‚ô¶-cong‚ÇÇ (‚âà,[end] ‚ü® mapAll _ _ , _ ‚ü©) (‚âà,[end] ‚ü® mapAll _ _ , _ ‚ü©))
  (Sel‚ô¶ œÉs))
  ‚âà-refl)
  (cont-‚äó cont refl (mk (mk here here) E‚ÇÄ) (mk (mk here here) ‚ü® End/‚ÇÅ œÉE X , _ ‚ü©) (P‚ÇÄ c‚ÇÄ) (P‚ÇÅ c‚ÇÅ))
  where postulate c‚ÇÄ c‚ÇÅ : _
        E‚ÇÄ = ‚ü® End/‚ÇÄ œÉE X , _ ‚ü©
TC-‚ààSplit cont l (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) | diff x = {!!}
TC-‚ààSplit cont l (TC-‚Öã-inp l‚ÇÅ P) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) ([‚Ü¶]‚àà.l‚Ä¶ l‚ÇÅ)
TC-‚ààSplit cont (mk l X) (TC-‚Öã-inp (mk .l Y) P) | same = TC-conv
  (‚ô¶-cong‚ÇÇ (‚âà-trans (‚âà,[end] _) (‚âà,[end] _)) ‚âà-refl)
  (cont-‚Öã cont refl (there[] (mk (mk here here) _)) (mk (mk here here) _) {!!} (P c‚ÇÄ c‚ÇÅ))
  -- postulate for channels.. grr
  where postulate c‚ÇÄ c‚ÇÅ : _
TC-‚ààSplit cont l (TC-‚Öã-inp l‚ÇÅ P) | diff x = TC-‚Öã-inp (‚àà‚ô¶‚ÇÄ (move l l‚ÇÅ (mk x))) Œª c‚ÇÄ c‚ÇÅ ‚Üí
  TC-conv (‚âà-trans ‚ô¶-com,
          (‚âà,[] (‚âà-trans ‚ô¶-com, (‚âà,[]
           (‚âà-sym (‚âà-trans (‚àà‚ô¶‚ÇÄ-compute (move l l‚ÇÅ (mk x)))
           (‚ô¶-cong‚ÇÇ (‚âà-trans (move-compute‚Ä¶ _ _ _)
           (‚âà-trans (/Ds-com (Proto.forget ([‚Ü¶]‚àà.lI l)) (Proto.forget ([‚Ü¶]‚àà.lI l‚ÇÅ)))
           (‚âà-sym (move-compute‚Ä¶ _ _ _))))
           ‚âà-refl)))
           ‚àº-refl))
           ‚àº-refl))
  (TC-‚ààSplit cont (there[] (there[] (move l‚ÇÅ l (Diff-sym (mk x))))) (P c‚ÇÄ c‚ÇÅ))
TC-‚ààSplit cont l (TC-end E) = ùüò-elim (NES cont (Map.All‚àà (Proto.All‚àà E ([‚Ü¶]‚àà.lI l)) ([‚Ü¶]‚àà.lE l)))
TC-‚ààSplit cont l (TC-split œÉs A1 P P‚ÇÅ) = {!!}
-}




{-

TC-‚àà‚Öã : ‚àÄ {Œ¥I Œ¥K c A B}{I : Proto Œ¥I}{K : Proto Œ¥K}(l : [ c ‚Ü¶ A ‚Öã B ]‚àà I)
  ‚Üí (‚àÄ {d e Œ¥J}{J : Proto Œ¥J} (l : [ d ‚Ü¶ A ]‚àà J)(l' : [ e ‚Ü¶  B ]‚àà J) ‚Üí DifferentVars l l' ‚Üí TC‚ü® J ‚ü©
     ‚Üí TC‚ü® ((J / [‚Ü¶]‚àà.lI l) /Ds Proto.forget ([‚Ü¶]‚àà.lI l')) ‚ô¶Proto' K ‚ü©)
  ‚Üí TC‚ü® I ‚ü© ‚Üí  TC‚ü® I [/] l ‚ô¶Proto' K ‚ü©
TC-‚àà‚Öã l cont (TC-‚äó-out l‚ÇÅ œÉs œÉE A0 P‚ÇÄ P‚ÇÅ) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) l‚ÇÅ
... | X = {!!}
TC-‚àà‚Öã l cont (TC-‚Öã-inp l‚ÇÅ P) with sameVar? ([‚Ü¶]‚àà.l‚Ä¶ l) ([‚Ü¶]‚àà.l‚Ä¶ l‚ÇÅ)
TC-‚àà‚Öã (mk l y) cont (TC-‚Öã-inp (mk .l x) P) | same = TC-conv (‚ô¶-cong‚ÇÇ (‚âà-trans (‚âà,[end] _) (‚âà,[end] _)) ‚âà-refl) (cont (mk (mk (there here) here) _) (mk (mk here here) _) {!!} (TC-conv ‚âà-refl (P c‚ÇÄ c‚ÇÅ)))
  where
    postulate
      c‚ÇÄ c‚ÇÅ : _
TC-‚àà‚Öã l cont (TC-‚Öã-inp l‚ÇÅ P) | diff l/=l‚ÇÅ = TC-‚Öã-inp (‚àà‚ô¶‚ÇÄ (move  l l‚ÇÅ (mk l/=l‚ÇÅ))) (Œª c‚ÇÄ c‚ÇÅ ‚Üí
   TC-conv (‚âà-trans ‚ô¶-com, (‚âà,[] (‚âà-trans ‚ô¶-com, (‚âà,[] (‚âà-sym (‚âà-trans (‚àà‚ô¶‚ÇÄ-compute (move l l‚ÇÅ (mk l/=l‚ÇÅ)))
           (‚ô¶-cong‚ÇÇ (‚âà-trans (move-compute‚Ä¶ ([‚Ü¶]‚àà.l‚Ä¶ l) ([‚Ü¶]‚àà.l‚Ä¶ l‚ÇÅ) l/=l‚ÇÅ)
           (‚âà-trans {!!}
            (‚âà-sym (move-compute‚Ä¶ _ _ _)))) ‚âà-refl))) ‚àº-refl)) ‚àº-refl))
  (TC-‚àà‚Öã (there[] (there[] (move l‚ÇÅ l (Diff-sym (mk l/=l‚ÇÅ))))) cont (P c‚ÇÄ c‚ÇÅ)))
TC-‚àà‚Öã l cont (TC-end E) = {!!}
TC-‚àà‚Öã l cont (TC-split œÉs A1 P P‚ÇÅ) = {!!}

{-
TC-‚àà‚äó : ‚àÄ {Œ¥I Œ¥K c A B}{I : Proto Œ¥I}{K : Proto Œ¥K}(l : [ c ‚Ü¶ A ‚äó B ]‚àà I)
  ‚Üí (‚àÄ {d e Œ¥J‚ÇÄ Œ¥J‚ÇÅ}{J‚ÇÄ : Proto Œ¥J‚ÇÄ}{J‚ÇÅ : Proto Œ¥J‚ÇÅ}
       (l‚ÇÄ : [ d ‚Ü¶ A ]‚àà J‚ÇÄ)(l‚ÇÅ : [ e ‚Ü¶ B ]‚àà J‚ÇÅ) ‚Üí TC‚ü® J‚ÇÄ ‚ü© ‚Üí TC‚ü® J‚ÇÅ ‚ü©
        ‚Üí TC‚ü® (J‚ÇÄ [/] l‚ÇÄ ‚ô¶Proto' J‚ÇÅ [/] l‚ÇÅ) ‚ô¶Proto' K ‚ü©)
  ‚Üí TC‚ü® I ‚ü© ‚Üí TC‚ü® I [/] l ‚ô¶Proto' K ‚ü©
TC-‚àà‚äó = {!!}


{-
TC-cut :
    ‚àÄ {c‚ÇÄ c‚ÇÅ S‚ÇÄ S‚ÇÅ Œ¥‚ÇÄ Œ¥‚ÇÅ}{I‚ÇÄ : Proto Œ¥‚ÇÄ}{I‚ÇÅ : Proto Œ¥‚ÇÅ}
      (D : Dual S‚ÇÄ S‚ÇÅ)
      (l‚ÇÄ : [ c‚ÇÄ ‚Ü¶ S‚ÇÄ ]‚àà I‚ÇÄ)(l‚ÇÅ : [ c‚ÇÅ ‚Ü¶ S‚ÇÅ ]‚àà I‚ÇÅ)
      (P‚ÇÄ : TC‚ü® I‚ÇÄ ‚ü©) (P‚ÇÅ : TC‚ü® I‚ÇÅ ‚ü©)
    ‚Üí TC‚ü® (I‚ÇÄ [/] l‚ÇÄ) ‚ô¶Proto' (I‚ÇÅ [/] l‚ÇÅ) ‚ü©
TC-cut end œÉs A0 P‚ÇÄ P‚ÇÅ = {!TC-split œÉs A0 P‚ÇÄ P‚ÇÅ!}
TC-cut (‚äó‚Öã D D‚ÇÅ D‚ÇÇ D‚ÇÉ) l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = TC-conv ‚ô¶-com
  (TC-‚àà‚Öã l‚ÇÅ (Œª d e d/=e a'b' ‚Üí TC-conv (‚âà-trans ‚ô¶-com (‚ô¶-cong‚ÇÇ (‚âà-trans (move-compute {!e!} {!d!} {!(Diff-sym d/=e)!}) {!Proto.forget!}) ‚âà-refl))
   (TC-‚àà‚äó l‚ÇÄ (Œª d' e' a b ‚Üí TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ ‚âà-refl
               (‚àà‚ô¶‚ÇÅ-compute (move {!e!} {!d!} {!(Diff-sym d/=e)!}))) ‚ô¶-assoc)
     (TC-cut  D d' (‚àà‚ô¶‚ÇÅ (move {!e!} {!d!} {!(Diff-sym d/=e)!})) a (TC-cut D‚ÇÇ e' e b a'b')))
   P‚ÇÄ))
  P‚ÇÅ)
TC-cut (‚Öã‚äó D D‚ÇÅ D‚ÇÇ D‚ÇÉ) l‚ÇÄ l‚ÇÅ P‚ÇÄ P‚ÇÅ = TC-conv ‚âà-refl
  (TC-‚àà‚Öã l‚ÇÄ (Œª {_}{_}{_}{J} d e d/=e ab ‚Üí TC-conv ‚ô¶-com
  (TC-‚àà‚äó l‚ÇÅ (Œª {_}{_}{_}{_}{J‚ÇÄ}{J‚ÇÅ} d' e' a b ‚Üí let X = TC-cut D‚ÇÅ d' d a ab
       in TC-conv (‚âà-trans (‚ô¶-cong‚ÇÇ ‚âà-refl (‚àà‚ô¶‚ÇÅ-compute (move d e d/=e)))
               (‚âà-trans ‚ô¶-assoc (‚ô¶-cong‚ÇÇ ‚ô¶-com (move-compute d e (mk d/=e)))))
          (TC-cut D‚ÇÉ e' (‚àà‚ô¶‚ÇÅ (move d e d/=e)) b X))
   P‚ÇÅ)) P‚ÇÄ)

-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
-- -}
