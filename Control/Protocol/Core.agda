{-# OPTIONS --without-K #-}
open import Universe.NP
open import Function.NP
open import Type
open import Level.NP
open import Data.Product.NP using (Œ£; _√ó_; _,_)
open import Data.Zero using (ùüò)
open import Data.One using (ùüô)
open import Data.Two using (ùüö; 0‚ÇÇ; 1‚ÇÇ)
open import Relation.Binary.PropositionalEquality.NP using (_‚â°_; !_; _‚àô_; refl; ap; coe; coe!; tr)
open import Function.Extensionality
open import HoTT
open import Data.ShapePolymorphism
open import Control.Protocol.InOut
open import Control.Protocol.End public
open Equivalences
import Control.Protocol.Universal

module Control.Protocol.Core where

module _ {‚Ñì} where
    open Control.Protocol.Universal {‚Çõ ‚Ñì} {‚Ñì} (universe id) public

    data Proto‚òê : Proto ‚Üí ‚òÖ_(‚Çõ (‚Çõ ‚Ñì)) where
      end‚òê : Proto‚òê end
      com‚òê : ‚àÄ io {M P} (P‚òê : ‚àÄ (m : ‚òê M) ‚Üí Proto‚òê (P m)) ‚Üí Proto‚òê (com io P)

    recv‚òê : {M : ‚òÖ_ ‚Ñì}(P : ..(_ : M) ‚Üí Proto) ‚Üí Proto
    recv‚òê P = recv (Œª { [ m ] ‚Üí P m })

    send‚òê : {M : ‚òÖ_ ‚Ñì}(P : ..(_ : M) ‚Üí Proto) ‚Üí Proto
    send‚òê P = send (Œª { [ m ] ‚Üí P m })

Proto_ : (‚Ñì : Level) ‚Üí ‚òÖ_(‚Çõ (‚Çõ ‚Ñì))
Proto_ ‚Ñì = (Proto) {‚Ñì}

Proto‚ÇÄ = Proto_ ‚ÇÄ
Proto‚ÇÅ = Proto_ ‚ÇÅ

‚úì·¥æ : ùüö ‚Üí Proto
‚úì·¥æ 0‚ÇÇ = send‚Ä≤ ùüò end
‚úì·¥æ 1‚ÇÇ = end

module _ {io‚ÇÄ io‚ÇÅ}(io= : io‚ÇÄ ‚â° io‚ÇÅ)
         {M‚ÇÄ M‚ÇÅ : ‚òÖ}(M‚âÉ : M‚ÇÄ ‚âÉ M‚ÇÅ)
         {P‚ÇÄ : M‚ÇÄ ‚Üí Proto}{P‚ÇÅ : M‚ÇÅ ‚Üí Proto}
         (P= : ‚àÄ m‚ÇÄ ‚Üí P‚ÇÄ m‚ÇÄ ‚â° P‚ÇÅ (‚Äì> M‚âÉ m‚ÇÄ))
         {{_ : UA}} {{_ : FunExt}}
         where
    com‚âÉ : com io‚ÇÄ P‚ÇÄ ‚â° com io‚ÇÅ P‚ÇÅ
    com‚âÉ = com=' io= (ua M‚âÉ) Œª m ‚Üí P= m ‚àô ap P‚ÇÅ (! coe-Œ≤ M‚âÉ m)
      where
        com=' : ‚àÄ {io‚ÇÄ io‚ÇÅ}(io= : io‚ÇÄ ‚â° io‚ÇÅ)
                  {M‚ÇÄ M‚ÇÅ : ‚òÖ}(M= : M‚ÇÄ ‚â° M‚ÇÅ)
                  {P‚ÇÄ P‚ÇÅ}(P= : (m‚ÇÄ : M‚ÇÄ) ‚Üí P‚ÇÄ m‚ÇÄ ‚â° P‚ÇÅ (coe M= m‚ÇÄ))
                ‚Üí com io‚ÇÄ P‚ÇÄ ‚â° com io‚ÇÅ P‚ÇÅ
        com=' refl refl P= = ap (com _) (Œª= P=)

send‚âÉ = com‚âÉ {Out} refl
recv‚âÉ = com‚âÉ {In} refl

module _ {‚Ñì} io {M N : ‚òÖ_ ‚Ñì}(P : M √ó N ‚Üí Proto) where
    com‚ÇÇ : Proto
    com‚ÇÇ = com io Œª m ‚Üí com io Œª n ‚Üí P (m , n)

-- -}
-- -}
-- -}
-- -}
-- -}
