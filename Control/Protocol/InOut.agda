{-# OPTIONS --without-K #-}
open import Function.NP
open import Type
open import Level.NP
open import Data.Product.NP using (Œ£; _√ó_; _,_)
open import Data.One using (ùüô)
open import Relation.Binary.PropositionalEquality.NP using (_‚â°_; !_; _‚àô_; refl; ap; coe; coe!)
open import Function.Extensionality
open import HoTT
open import Data.ShapePolymorphism
open Equivalences
open import Type

module Control.Protocol.InOut where

data InOut : ‚òÖ where
  In Out : InOut

dual·¥µ·¥º : InOut ‚Üí InOut
dual·¥µ·¥º In  = Out
dual·¥µ·¥º Out = In

dual·¥µ·¥º-involutive : ‚àÄ io ‚Üí dual·¥µ·¥º (dual·¥µ·¥º io) ‚â° io
dual·¥µ·¥º-involutive In = refl
dual·¥µ·¥º-involutive Out = refl

dual·¥µ·¥º-equiv : Is-equiv dual·¥µ·¥º
dual·¥µ·¥º-equiv = self-inv-is-equiv _ dual·¥µ·¥º-involutive

dual·¥µ·¥º-inj : ‚àÄ {x y} ‚Üí dual·¥µ·¥º x ‚â° dual·¥µ·¥º y ‚Üí x ‚â° y
dual·¥µ·¥º-inj = Is-equiv.injective dual·¥µ·¥º-equiv

‚ü¶_‚üß·¥µ·¥º : InOut ‚Üí ‚àÄ{‚Ñì}(M : ‚òÖ_ ‚Ñì)(P : M ‚Üí ‚òÖ_ ‚Ñì) ‚Üí ‚òÖ_ ‚Ñì
‚ü¶_‚üß·¥µ·¥º In  = Œ†
‚ü¶_‚üß·¥µ·¥º Out = Œ£
